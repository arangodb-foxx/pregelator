{"version":3,"sources":["ExecutionContext.js","PregelContext.js","SmartGraphListContext.js","RunningPregelList.js","AppBarInfo.js","UserDefinedAlgorithmsContext.js","JSONEditor.js","App.js","serviceWorker.js","index.js"],"names":["ExecutionContext","createContext","ExecutionProvider","props","useState","execution","setExecution","Provider","value","children","useExecution","useContext","PregelContext","PregelProvider","pregels","setPregels","SmartGraphListContext","SmartGraphListProvider","graphs","setGraphs","useEffect","get","then","res","data","getRunning","filteredArr","Object","entries","pregel","state","push","getDone","RunningPregelList","clearPids","a","Box","width","primary","label","alignSelf","onClick","Heading","level","keys","length","Text","DataTable","columns","property","header","render","datum","resultField","totalRuntime","onClickRow","toast","pid","post","headers","responseStatus","graphName","selectedGraph","responseDetails","reports","report","result","summary","preview","prevExecution","AppBarInfo","margin","UserDefinedAlgorithmsContext","UserDefinedAlgorithmsProvider","userDefinedAlgorithms","setUserDefinedAlgorithms","EditorActionsBar","direction","align","background","pad","left","right","vertical","elevation","style","zIndex","editorRef","React","createRef","outputEditorRef","previewEditorRef","JSONEditor","callback","delay","savedCallback","useRef","current","id","setInterval","clearInterval","useInterval","response","prevPregels","updated","toFixed","fetchExecutionResult","outputCursorPosition","editor","getCursorPosition","previewCursorPosition","outputVal","JSON","stringify","previewVal","getValue","setValue","checkState","executeAlgorithm","algorithm","replace","parse","error","name","msg","console","log","setSelectedGraph","selectedLocalAlgorithm","setLocalSelectedAlgorithm","flex","fill","options","placeholder","onChange","algo","e","setSelectedAlgorithm","option","ref","getSelectedAlgorithm","mode","height","theme","commands","setOptions","useWorker","editorProps","$blockScrolling","basis","weight","readOnly","overflow","resizeable","size","primaryKey","annotations","vertex","className","secondaryKey","content","shard","global","colors","brand","font","family","AppBar","tag","justify","App","showSidebar","setShowSidebar","Grommet","full","ResponsiveContext","Consumer","Button","icon","Notification","position","horizontal","Layer","FormClose","Collapsible","open","Boolean","window","location","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","message"],"mappings":"iTAEaA,G,OAAmBC,2BAEnBC,EAAoB,SAAAC,GAAU,IAAD,EACNC,mBAAS,IADH,mBACjCC,EADiC,KACtBC,EADsB,KAGxC,OACE,kBAACN,EAAiBO,SAAlB,CAA2BC,MAAO,CAACH,EAAWC,IAC3CH,EAAMM,WAKAC,EAAe,kBAAMC,qBAAWX,ICZhCY,EAAgBX,0BAEhBY,EAAiB,SAAAV,GAAU,IAAD,EACPC,mBAAS,IADF,mBAC9BU,EAD8B,KACrBC,EADqB,KAGrC,OACE,kBAACH,EAAcL,SAAf,CAAwBC,MAAO,CAACM,EAASC,IACtCZ,EAAMM,WCNAO,EAAwBf,0BAGxBgB,EAAyB,SAAAd,GAAU,IAAD,EACjBC,mBAAS,IADQ,mBACtCc,EADsC,KAC9BC,EAD8B,KAa7C,OAJAC,qBAAU,WAJRC,cAAqD,UAClDC,MAAK,SAAAC,GAAG,OAAIJ,EAAUI,EAAIC,WAK5B,IAGD,kBAACR,EAAsBT,SAAvB,CAAgCC,MAAO,CAACU,EAAQC,IAC7ChB,EAAMM,W,mECPPgB,EAAa,SAACX,GAElB,IADA,IAAIY,EAAc,GAClB,MAAuBC,OAAOC,QAAQd,GAAtC,eAAgD,CAAC,IAArCe,EAAoC,uBACzB,YAAjBA,EAAOC,OACTJ,EAAYK,KAAKF,GAGrB,OAAOH,GAGHM,EAAU,SAAClB,GAEf,IADA,IAAIY,EAAc,GAClB,MAAuBC,OAAOC,QAAQd,GAAtC,eAAgD,CAAC,IAArCe,EAAoC,uBACzB,SAAjBA,EAAOC,OACTJ,EAAYK,KAAKF,GAGrB,OAAOH,GA6IMO,EA1IW,WAAO,IAAD,EACLvB,IAAhBJ,EADqB,sBAEAK,qBAAWC,GAFX,mBAEvBE,EAFuB,KAEdC,EAFc,KAuD1BmB,EAAS,uCAAG,sBAAAC,EAAA,sDACdpB,EAAW,IADG,2CAAH,qDAIb,OACE,6BACE,kBAACqB,EAAA,EAAD,CAAKC,MAAO,QACV,kBAAC,SAAD,CACEC,SAAO,EACPC,MAAM,QACNC,UAAW,MACXC,QAASP,KAIb,kBAACQ,EAAA,EAAD,CAASC,MAAM,KAAf,YAA6BhB,OAAOiB,KAAKnB,EAAWX,IAAU+B,OAA9D,KAEA,kBAACT,EAAA,EAAD,KAC+C,IAA5CT,OAAOiB,KAAKnB,EAAWX,IAAU+B,QAClC,kBAACC,EAAA,EAAD,yCAECnB,OAAOiB,KAAKnB,EAAWX,IAAU+B,OAAS,GAC3C,kBAACE,EAAA,EAAD,CACEC,QAAS,CACP,CACEC,SAAU,MACVC,OAAQ,kBAACJ,EAAA,EAAD,WACRR,SAAS,GAEX,CACEW,SAAU,UACVC,OAAQ,eACRC,OAAQ,SAAAC,GAAK,OACX,kBAAChB,EAAA,EAAD,KACE,kBAACU,EAAA,EAAD,KAAOM,EAAMC,iBAMrB7B,KAAMC,EAAWX,MAMrB,kBAAC4B,EAAA,EAAD,CAASC,MAAM,KAAf,SAA0BhB,OAAOiB,KAAKZ,EAAQlB,IAAU+B,OAAxD,KACA,kBAACT,EAAA,EAAD,KAC4C,IAAzCT,OAAOiB,KAAKZ,EAAQlB,IAAU+B,QAC/B,kBAACC,EAAA,EAAD,0CAECnB,OAAOiB,KAAKZ,EAAQlB,IAAU+B,OAAS,GAExC,kBAACE,EAAA,EAAD,CACEC,QAAS,CACP,CACEC,SAAU,MACVC,OAAQ,kBAACJ,EAAA,EAAD,YAEV,CACEG,SAAU,UACVC,OAAQ,iBACRC,OAAQ,SAAAC,GAAK,OACX,kBAAChB,EAAA,EAAD,KACE,kBAACU,EAAA,EAAD,KAAOM,EAAME,kBAMrBC,WAAY,SAACH,GAzHQ,IAAC/C,IA0HC+C,EAAMA,MAzHnCI,YAAM,+BAAD,OAAgCnD,EAAUoD,MAE/CC,eACmD,SACjD,CACED,IAAKpD,EAAUoD,KAEjB,CACEE,QACE,CAAC,eAAgB,sBAClBrC,MAAK,SAACsC,GACLA,EAAepC,MAAsC,SAA9BoC,EAAepC,KAAKM,OAC7C4B,eACmD,gBACjD,CACEG,UAAWxD,EAAUyD,cACrBT,YAAahD,EAAUgD,aAEzB,CACEM,QACE,CAAC,eAAgB,sBAClBrC,MAAK,SAACyC,GACT,GAAIA,EAAgBvC,KAAM,CACxB,IAAIwC,EAAU,GAEd,GAAIJ,EAAepC,KAAKwC,SAAWJ,EAAepC,KAAKwC,QAAQnB,QAAU,EAAG,CAC1E,cAAuBlB,OAAOC,QAAQgC,EAAepC,KAAKwC,SAA1D,eAAoE,CAAC,IAAzDC,EAAwD,uBAClED,EAAQjC,KAAKkC,GAEfD,EAAUJ,EAAepC,KAAKwC,eACvBJ,EAAepC,KAAKwC,QAI7B,IAAIE,EAAS,CACXC,QAASP,EAAepC,KACxB4C,QAASL,EAAgBvC,KACzBwC,QAASA,GAEXE,EAAOC,QAAQV,IAAMpD,EAAUoD,IAE/BnD,GAAa,SAAA+D,GACX,OAAO,eAAIH,cAiFf1C,KAAMQ,EAAQlB,QCpJTwD,EAVI,WAAO,IAAD,EACL3D,qBAAWC,GAAtBE,EADgB,oBAEvB,OACE,6BACE,kBAAC,UAAD,CAAS6B,MAAM,IAAI4B,OAAO,QAA1B,cACA,kBAAC,UAAD,CAAS5B,MAAM,IAAI4B,OAAO,QAA1B,wBAAuD5C,OAAOiB,KAAK9B,GAAS+B,U,iBCNrE2B,G,4BAA+BvE,2BAE/BwE,EAAgC,SAAAtE,GAAU,IAAD,EACMC,mBAAS,IADf,mBAC7CsE,EAD6C,KACtBC,EADsB,KAcpD,OAJAvD,qBAAU,WANRC,cAAqD,yBAClDC,MAAK,SAAAC,GACJoD,EAAyBpD,EAAIC,WAMhC,IAGD,kBAACgD,EAA6BjE,SAA9B,CAAuCC,MAAO,CAACkE,EAAuBC,IACnExE,EAAMM,WCJPmE,EAAmB,SAACzE,GAAD,OACvB,kBAAC,MAAD,eACE0E,UAAU,MACVC,MAAM,SACNC,WAAW,SACXC,IAAK,CAACC,KAAM,QAASC,MAAO,QAASC,SAAU,SAC/CC,UAAU,SACVC,MAAO,CAACC,OAAQ,MACZnF,KAIJoF,EAAYC,IAAMC,YAClBC,EAAkBF,IAAMC,YACxBE,EAAmBH,IAAMC,YA2B7B,IAmVeG,EAnVI,YArBnB,SAAqBC,EAAUC,GAC7B,IAAMC,EAAgBC,mBAGtB5E,qBAAU,WACR2E,EAAcE,QAAUJ,IACvB,CAACA,IAGJzE,qBAAU,WAKR,GAAc,OAAV0E,EAAgB,CAClB,IAAII,EAAKC,aALX,WACEJ,EAAcE,YAIaH,GAC3B,OAAO,kBAAMM,cAAcF,OAE5B,CAACJ,IAIJO,EAAY,YAES,SAACvF,GAChB,IAD6B,IAAD,iBAChBe,EADgB,uBAEL,YAAjBA,EAAOC,OACT4B,eACmD,SACjD,CACED,IAAK5B,EAAO4B,KAEd,CACEE,QACE,CAAC,eAAgB,sBAClBrC,MAAK,SAACgF,GACLA,EAAS9E,MAAgC,SAAxB8E,EAAS9E,KAAKM,QACjCf,GAAW,SAAAwF,GACT,IAAIC,EAAUD,EAGd,OAFAC,EAAQ3E,EAAO4B,KAAK3B,MAAQwE,EAAS9E,KAAKM,MAC1C0E,EAAQ3E,EAAO4B,KAAKH,aAAegD,EAAS9E,KAAK8B,aAAamD,QAAQ,GAC/D,eAAID,MAIbE,EAAqB7E,QApB7B,MAAuBF,OAAOC,QAAQd,GAAtC,eAAiD,IA2BjD,IAAI6F,EAAuBjB,EAAgBO,QAAQW,OAAOC,oBACtDC,EAAwBnB,EAAiBM,QAAQW,OAAOC,oBACxDE,EAAY,GACZ1G,EAAU8D,UACZ4C,EAAYC,KAAKC,UAAU5G,EAAU8D,QAAS,KAAM,IAEtD,IAAI+C,EAAa,GACb7G,EAAU+D,UACZ8C,EAAaF,KAAKC,UAAU5G,EAAU+D,QAAS,KAAM,IAInDsB,EAAgBO,QAAQW,OAAOO,aAAeJ,GAChDrB,EAAgBO,QAAQW,OAAOQ,SAASL,EAAWJ,GAEjDhB,EAAiBM,QAAQW,OAAOO,aAAeD,GACjDvB,EAAiBM,QAAQW,OAAOQ,SAASF,EAAYJ,GAIzDO,CAAWvG,KAEb,KAIF,IAAIwG,EAAgB,uCAAG,gCAAAnF,EAAA,kEAKnBoF,GAHIA,EAAYhC,EAAUU,QAAQW,OAAOO,YAGnBK,QAAQ,eAAgB,MAAMA,QAAQ,uBAAwB,MAIhF,gBAHJD,EAAYP,KAAKS,MAAMF,KANJ,gBAUjBlE,EAAckE,EAAUlE,YAVP,8BAYjBG,IAAMkE,MAAM,qCAZK,8BAgBd5D,EAhBc,wBAiBjBN,IAAMkE,MAAM,2BAjBK,4CAqBIhE,eAC4B,QACjD,CACEiE,KAAM,MACN9D,UAAWC,EACXyD,UAAWA,GAEb,CACE5D,QACE,CAAC,eAAgB,sBA9BJ,QAqBb2C,EArBa,OAiCnBvF,GAAW,SAAAwF,GACT,IAAIC,EAAUD,EAQd,OAPAC,EAAQF,EAAS9E,KAAKiC,KAAO,CAC3B,IAAO6C,EAAS9E,KAAKiC,IACrB,aAAgB,KAChB,YAAeJ,EACf,cAAiBS,EACjB,MAAS,WAEJ,eAAI0C,MA5HUoB,EA8HZ,wBAA0BtB,EAAS9E,KAAKiC,IA7HvDD,YAAMoE,GAiFiB,kDA8CnBC,QAAQC,IAAR,MACAtE,IAAMkE,MAAM,gBA/CO,kCAlFN,IAAUE,IAkFJ,qBAAH,qDAzDG,EA6GNjH,qBAAWK,GAArBE,EA7GgB,sBA8GSP,qBAAW6D,GAApCE,EA9GgB,sBL5CM/D,qBAAWC,GK4CjB,mBA+GhBE,EA/GgB,KA+GPC,EA/GO,OAgHWL,IAhHX,mBAgHhBL,EAhHgB,KAgHLC,EAhHK,OAmHmBF,mBAAS,MAnH5B,mBAmHhB0D,EAnHgB,KAmHDiE,EAnHC,OAoHqC3H,mBAAS,MApH9C,mBAoHhB4H,EApHgB,KAoHQC,EApHR,KAiJjBvB,EAAuB,SAACrG,GAC5BmD,YAAM,+BAAD,OAAgCnD,EAAUoD,MAE/CC,eACmD,SACjD,CACED,IAAKpD,EAAUoD,KAEjB,CACEE,QACE,CAAC,eAAgB,sBAClBrC,MAAK,SAACsC,GACLA,EAAepC,MAAsC,SAA9BoC,EAAepC,KAAKM,OAC7C4B,eACmD,gBACjD,CACEG,UAAWxD,EAAUyD,cACrBT,YAAahD,EAAUgD,aAEzB,CACEM,QACE,CAAC,eAAgB,sBAClBrC,MAAK,SAACyC,GACT,GAAIA,EAAgBvC,KAAM,CACxB,IAAIwC,EAAU,GAEd,GAAIJ,EAAepC,KAAKwC,SAAWJ,EAAepC,KAAKwC,QAAQnB,QAAU,EAAG,CAC1E,cAAuBlB,OAAOC,QAAQgC,EAAepC,KAAKwC,SAA1D,eAAoE,CAAC,IAAzDC,EAAwD,uBAClED,EAAQjC,KAAKkC,GAEfD,EAAUJ,EAAepC,KAAKwC,eACvBJ,EAAepC,KAAKwC,QAI7B,IAAIE,EAAS,CACXC,QAASP,EAAepC,KACxB4C,QAASL,EAAgBvC,KACzBwC,QAASA,GAEXE,EAAOC,QAAQV,IAAMpD,EAAUoD,IAE/BnD,GAAa,SAAA+D,GACX,OAAO,eAAIH,cAQvB,OACE,kBAAC,MAAD,CAAKW,UAAU,SAASqD,KAAK,OAAOC,KAAK,cAEvC,kBAAC,EAAD,KACE,kBAAC,SAAD,CACEC,QAASzG,OAAOiB,KAAK8B,GACrBH,OAAQ,CAACW,MAAO,SAChBmD,YAAa,mBAEbC,SAAU,aAvFW,SAACC,GAC5BN,EAA0BM,GAE1B,IAAIhB,EAAY,GAChB,IACEA,EAAY7C,EAAsB6D,GAAMhB,UACxChC,EAAUU,QAAQW,OAAOQ,SAASJ,KAAKC,UAAUM,EAAW,KAAM,IAAK,GACvE,MAAOiB,GACPhF,YAAM,yBAAD,OAA0BgF,KAgFzBC,CADsB,EAAZC,WAKd,kBAAC,SAAD,CACEN,QAASlH,EACTmH,YAAa,oBACb7H,MAAOsD,EACPwE,SAAU,YAAe,IAAbI,EAAY,EAAZA,OACVX,EAAiBW,MAIrB,kBAAC,SAAD,CACEpG,SAAO,EACPC,MAAM,UACNgC,OAAQ,CAACU,KAAM,SACfxC,QAAS6E,KAKb,kBAAC,MAAD,CAAKzC,UAAU,MAAMsD,KAAK,YACxB,kBAAC,MAAD,CAAKD,MAAI,GACP,kBAAC,IAAD,CAAWS,IAAKpD,EACL/E,MArGU,WAC3B,GAAIwH,EAAwB,CAC1B,IAAIT,EAAY,GAChB,IACEA,EAAY7C,EAAsBsD,GAAwBT,UAC1D,MAAOiB,GACPhF,YAAM,UAAYgF,GAEpB,OAAOxB,KAAKC,UAAUM,EAAW,KAAM,GAGzC,OAAOP,KAAKC,UAAU,GAAI,KAAM,GA0FR2B,GACPC,KAAK,OACLxG,MAAO,OACPyG,OAAQ,OACRC,MAAM,UACNC,SAAU,GAQVrB,KAAK,iBACLsB,WAAY,CAACC,WAAW,GACxBC,YAAa,CAACC,iBAAiB,MAI5C,kBAAC,MAAD,CAAKlB,MAAI,EAACrD,UAAU,UAClB,kBAAC,MAAD,CAAKqD,MAAI,EAACrD,UAAU,MAAMxC,MAAO,OAAQyG,OAAO,SAC9C,kBAAC,MAAD,CAAKO,MAAO,MAAOtE,WAAW,UAC5B,kBAAC,MAAD,CAAKA,WAAY,SAAS,kBAAC,OAAD,CAAMR,OAAQ,SAAU+E,OAAQ,QAAhC,YAC1B,kBAAC,IAAD,CAAWX,IAAKjD,EACL6D,UAAU,EACV/I,MAAO,GACPqI,KAAK,OACLxG,MAAO,OACPyG,OAAQ,OACRC,MAAM,UAENpB,KAAK,mBACLsB,WAAY,CAACC,WAAW,GACxBC,YAAa,CAACC,iBAAiB,MAG5C,kBAAC,MAAD,CAAKC,MAAO,MAAOtE,WAAW,UAC5B,kBAAC,MAAD,CAAKA,WAAY,SAAS,kBAAC,OAAD,CAAMR,OAAQ,SAAU+E,OAAQ,QAAhC,YAC1B,kBAAC,IAAD,CAAWX,IAAKhD,EACLnF,MAAO,GACP+I,UAAU,EACVV,KAAK,OACLxG,MAAO,OACPyG,OAAQ,OACRC,MAAM,UAENpB,KAAK,mBACLsB,WAAY,CAACC,WAAW,GACxBC,YAAa,CAACC,iBAAiB,OAI9C,kBAAC,MAAD,CAAKrE,WAAY,SAAS,kBAAC,OAAD,CAAMR,OAAQ,SAAU+E,OAAQ,QAAhC,YAC1B,kBAAC,MAAD,CAAKD,MAAM,MAAMG,SAAU,SAAUzE,WAAW,UAC9C,kBAAC,YAAD,CAAW0E,YAAY,EAAOC,KAAM,OAAQlH,UAAW,UAAWmH,YAAY,EACnE3G,QAAS,CACP,CACEC,SAAU,MACVC,OAAQ,UACRwG,KAAM,SACNvG,OAAQ,SAAAC,GAAK,OACX,kBAAC,YAAD,CAAWsG,KAAM,SACdtG,EAAMwE,OAIb,CACE3E,SAAU,SACVC,OAAQ,SACRwG,KAAM,QACNvG,OAAQ,SAAAC,GAAK,OACX,kBAAC,MAAD,KACE,kBAAC,OAAD,CAAMsG,KAAM,SAAUtG,EAAMwG,YAAYC,WAI9C,CACE5G,SAAU,OACVC,OAAQ,OACRwG,KAAM,QACNvG,OAAQ,SAAAC,GAAK,aACX,kBAAC,OAAD,CAAM0G,UAAW,YACX9E,IAAK,UACL2E,WAAW,OACXI,aAAa,UACbvI,KAAM,CACJ,CAACmG,KAAM,QAASqC,QAAS5G,EAAMT,OAC/B,CAACgF,KAAM,QAASqC,QAAO,UAAE5G,EAAMwG,YAAY,oBAApB,aAAE,EAAgCK,OACzD,CACEtC,KAAM,mBACNqC,QAAU5G,EAAMwG,YAAY,cAAiB,MAASxG,EAAMwG,YAAY,qBAE1E,CAACjC,KAAM,QAASqC,QAAS5G,EAAMwG,YAAN,aAMvCpI,KAAMnB,EAAU2D,SAAW,UCxW5C+E,EAAQ,CACZmB,OAAQ,CACNC,OAAQ,CACNC,MAAO,WAETC,KAAM,CACJC,OAAQ,SACRZ,KAAM,OACNZ,OAAQ,UAKRyB,EAAS,SAACpK,GAAD,OACb,kBAACiC,EAAA,EAAD,eACEoI,IAAI,SACJ3F,UAAU,MACVC,MAAM,SACN2F,QAAQ,UACR1F,WAAW,QACXC,IAAK,CAACC,KAAM,SAAUC,MAAO,QAASC,SAAU,SAChDC,UAAU,SACVC,MAAO,CAACC,OAAQ,MACZnF,KA8EOuK,MA1Ef,WAAgB,IAAD,EACyBtK,oBAAS,GADlC,mBACNuK,EADM,KACOC,EADP,KAGb,OACE,kBAAC,EAAD,KACE,kBAAC,EAAD,KACE,kBAAC,EAAD,KACE,kBAAC,EAAD,KACE,kBAACC,EAAA,EAAD,CAAS9B,MAAOA,EAAO+B,MAAI,GACzB,kBAACC,EAAA,EAAkBC,SAAnB,MACG,SAAAtB,GAAI,OACH,kBAACtH,EAAA,EAAD,CAAK+F,MAAI,GACP,kBAAC,EAAD,KACE,kBAAC,EAAD,MACA,kBAAC8C,EAAA,EAAD,CACEC,KAAM,kBAACC,EAAA,EAAD,MACN1I,QAAS,kBAAMmI,GAAgBD,OAGnC,kBAAC,IAAD,CAAgBS,SAAS,gBACzB,kBAAChJ,EAAA,EAAD,CAAKyC,UAAU,MAAMqD,MAAI,EAACsB,SAAU,CAAC6B,WAAY,WAC/C,kBAACjJ,EAAA,EAAD,CAAK8F,MAAI,GACP,kBAAC,EAAD,OAICyC,GAAwB,UAATjB,EAahB,kBAAC4B,EAAA,EAAD,KACE,kBAAClJ,EAAA,EAAD,CACE2C,WAAW,UACXyF,IAAI,SACJC,QAAQ,MACR3F,MAAM,SACND,UAAU,OAEV,kBAACoG,EAAA,EAAD,CACEC,KAAM,kBAACK,EAAA,EAAD,MACN9I,QAAS,kBAAMmI,GAAe,OAGlC,kBAACxI,EAAA,EAAD,CACE+F,MAAI,EACJpD,WAAW,UACXD,MAAM,SACN2F,QAAQ,UAJV,YAzBF,kBAACe,EAAA,EAAD,CAAa3G,UAAU,aAAa4G,KAAMd,GACxC,kBAACvI,EAAA,EAAD,CACE8F,MAAI,EACJlD,IAAI,QACJ3C,MAAM,SACN0C,WAAW,UACXK,UAAU,SAEV,kBAAC,EAAD,mBC7ERsG,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAAS5I,OACP,kBAAC,IAAM6I,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SD0HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB/K,MAAK,SAAAgL,GACJA,EAAaC,gBAEdC,OAAM,SAAA9E,GACLG,QAAQH,MAAMA,EAAM+E,c","file":"static/js/main.fc71a7a6.chunk.js","sourcesContent":["import React, {useState, createContext, useContext} from 'react';\n\nexport const ExecutionContext = createContext();\n\nexport const ExecutionProvider = props => {\n  const [execution, setExecution] = useState({});\n  \n  return (\n    <ExecutionContext.Provider value={[execution, setExecution]}>\n      {props.children}\n    </ExecutionContext.Provider>\n  );\n}\n\nexport const useExecution = () => useContext(ExecutionContext);","import React, {useState, createContext, useContext} from 'react';\n\nexport const PregelContext = createContext();\n\nexport const PregelProvider = props => {\n  const [pregels, setPregels] = useState({});\n\n  return (\n    <PregelContext.Provider value={[pregels, setPregels]}>\n      {props.children}\n    </PregelContext.Provider>\n  );\n}\n\nexport const usePregel = () => useContext(PregelContext);","import React, {useState, createContext, useEffect} from 'react';\nimport {get} from \"axios\";\n\nexport const SmartGraphListContext = createContext();\n\n\nexport const SmartGraphListProvider = props => {\n  const [graphs, setGraphs] = useState([\n  ]);\n\n  const fetchData = function () {\n    get(process.env.REACT_APP_ARANGODB_COORDINATOR_URL + 'graphs')\n      .then(res => setGraphs(res.data))\n  }\n\n  useEffect(() => {\n    fetchData();\n  }, []);\n\n  return (\n    <SmartGraphListContext.Provider value={[graphs, setGraphs]}>\n      {props.children}\n    </SmartGraphListContext.Provider>\n  );\n}","import React, {useContext} from 'react';\nimport {\n  Heading,\n  Box,\n  DataTable,\n  Text\n} from 'grommet';\n\nimport {PregelContext} from './PregelContext';\nimport {useExecution} from \"./ExecutionContext\";\nimport {post} from \"axios\";\nimport {toast} from \"react-toastify\";\nimport {Button} from \"grommet/index\";\n\nconst getRunning = (pregels) => {\n  let filteredArr = [];\n  for (let [, pregel] of Object.entries(pregels)) {\n    if (pregel.state === 'running') {\n      filteredArr.push(pregel);\n    }\n  }\n  return filteredArr;\n};\n\nconst getDone = (pregels) => {\n  let filteredArr = [];\n  for (let [, pregel] of Object.entries(pregels)) {\n    if (pregel.state === 'done') {\n      filteredArr.push(pregel);\n    }\n  }\n  return filteredArr;\n};\n\nconst RunningPregelList = () => {\n  const [, setExecution] = useExecution();\n  const [pregels, setPregels] = useContext(PregelContext);\n\n  const fetchExecutionResult = (execution) => {\n    toast(`Fetching status now of pid: ${execution.pid}`);\n\n    post(\n      process.env.REACT_APP_ARANGODB_COORDINATOR_URL + 'status',\n      {\n        pid: execution.pid\n      },\n      {\n        headers:\n          {'Content-Type': 'application/json'}\n      }).then((responseStatus) => {\n      if (responseStatus.data && responseStatus.data.state === 'done') {\n        post(\n          process.env.REACT_APP_ARANGODB_COORDINATOR_URL + 'resultDetails',\n          {\n            graphName: execution.selectedGraph,\n            resultField: execution.resultField\n          },\n          {\n            headers:\n              {'Content-Type': 'application/json'}\n          }).then((responseDetails) => {\n          if (responseDetails.data) {\n            let reports = [];\n\n            if (responseStatus.data.reports && responseStatus.data.reports.length >= 0) {\n              for (let [, report] of Object.entries(responseStatus.data.reports)) {\n                reports.push(report);\n              }\n              reports = responseStatus.data.reports;\n              delete responseStatus.data.reports;\n            }\n\n            // State the output editor will be filled automatically\n            let result = {\n              summary: responseStatus.data,\n              preview: responseDetails.data,\n              reports: reports\n            };\n            result.summary.pid = execution.pid;\n\n            setExecution(prevExecution => {\n              return {...result};\n            });\n          }\n        });\n      }\n    });\n  };\n\n  let clearPids = async function () {\n    setPregels({});\n  }\n\n  return (\n    <div>\n      <Box width={'full'}>\n        <Button\n          primary\n          label=\"Clear\"\n          alignSelf={'end'}\n          onClick={clearPids}\n        />\n      </Box>\n\n      <Heading level=\"3\">Running ({Object.keys(getRunning(pregels)).length})</Heading>\n\n      <Box>\n        {Object.keys(getRunning(pregels)).length === 0 &&\n        <Text>No pregel algorithm started yet.</Text>\n        }\n        {Object.keys(getRunning(pregels)).length > 0 &&\n        <DataTable\n          columns={[\n            {\n              property: 'pid',\n              header: <Text>ID</Text>,\n              primary: true,\n            },\n            {\n              property: 'percent',\n              header: 'Result field',\n              render: datum => (\n                <Box>\n                  <Text>{datum.resultField}</Text>\n                </Box>\n\n              )\n            },\n          ]}\n          data={getRunning(pregels)}\n        />\n        }\n\n      </Box>\n\n      <Heading level=\"3\">Done ({Object.keys(getDone(pregels)).length})</Heading>\n      <Box>\n        {Object.keys(getDone(pregels)).length === 0 &&\n        <Text>No pregel algorithm finished yet.</Text>\n        }\n        {Object.keys(getDone(pregels)).length > 0 &&\n\n        <DataTable\n          columns={[\n            {\n              property: 'pid',\n              header: <Text>ID</Text>\n            },\n            {\n              property: 'percent',\n              header: 'Execution time',\n              render: datum => (\n                <Box>\n                  <Text>{datum.totalRuntime}</Text>\n                </Box>\n\n              )\n            },\n          ]}\n          onClickRow={(datum) => {\n            fetchExecutionResult(datum.datum);\n          }}\n          data={getDone(pregels)}\n        />\n\n        }\n      </Box>\n\n    </div>\n  );\n}\n\nexport default RunningPregelList;","import React, {useContext} from 'react';\nimport {PregelContext} from \"./PregelContext\";\nimport {Heading} from \"grommet/index\";\n\nconst AppBarInfo = () => {\n  const [pregels] = useContext(PregelContext);\n  return (\n    <div>\n      <Heading level='4' margin='none'>Pregelator</Heading>\n      <Heading level='6' margin='none'>Executed algorithms: {Object.keys(pregels).length}</Heading>\n    </div>\n  )\n}\n\nexport default AppBarInfo;","import React, {useState, createContext, useEffect} from 'react';\nimport {get} from \"axios\";\n\nexport const UserDefinedAlgorithmsContext = createContext();\n\nexport const UserDefinedAlgorithmsProvider = props => {\n  const [userDefinedAlgorithms, setUserDefinedAlgorithms] = useState({});\n\n  const fetchData = function () {\n    get(process.env.REACT_APP_ARANGODB_COORDINATOR_URL + 'userDefinedAlgorithms')\n      .then(res => {\n        setUserDefinedAlgorithms(res.data)\n      })\n  }\n\n  useEffect(() => {\n    fetchData();\n  }, []);\n\n  return (\n    <UserDefinedAlgorithmsContext.Provider value={[userDefinedAlgorithms, setUserDefinedAlgorithms]}>\n      {props.children}\n    </UserDefinedAlgorithmsContext.Provider>\n  );\n}","import React, {useContext, useEffect, useState, useRef} from 'react';\n\nimport AceEditor from \"react-ace\";\nimport \"ace-builds/src-noconflict/theme-monokai\";\nimport \"ace-builds/src-noconflict/ext-language_tools\"\nimport \"ace-builds/src-noconflict/mode-json\";\nimport \"./css/customList.css\"\n\nimport {Box, Button, DataTable, Select, Text, Paragraph, List} from \"grommet/index\";\nimport {post} from \"axios\";\nimport {toast} from \"react-toastify\";\n\nimport {usePregel} from \"./PregelContext\";\nimport {SmartGraphListContext} from \"./SmartGraphListContext\";\nimport {UserDefinedAlgorithmsContext} from \"./UserDefinedAlgorithmsContext\";\nimport {useExecution} from \"./ExecutionContext\";\n\nconst EditorActionsBar = (props) => (\n  <Box\n    direction='row'\n    align='center'\n    background='dark-1'\n    pad={{left: 'small', right: 'small', vertical: 'small'}}\n    elevation='medium'\n    style={{zIndex: '1'}}\n    {...props}\n  />\n);\n\nlet editorRef = React.createRef();\nlet outputEditorRef = React.createRef();\nlet previewEditorRef = React.createRef();\n\nconst notifyUser = function (msg) {\n  toast(msg);\n}\n\nfunction useInterval(callback, delay) {\n  const savedCallback = useRef();\n\n  // Remember the latest callback.\n  useEffect(() => {\n    savedCallback.current = callback;\n  }, [callback]);\n\n  // Set up the interval.\n  useEffect(() => {\n    function tick() {\n      savedCallback.current();\n    }\n\n    if (delay !== null) {\n      let id = setInterval(tick, delay);\n      return () => clearInterval(id);\n    }\n  }, [delay]);\n}\n\nconst JSONEditor = () => {\n  useInterval(() => {\n      // Update logic\n      let checkState = (pregels) => {\n        for (let [, pregel] of Object.entries(pregels)) {\n          if (pregel.state === 'running') {\n            post(\n              process.env.REACT_APP_ARANGODB_COORDINATOR_URL + 'status',\n              {\n                pid: pregel.pid\n              },\n              {\n                headers:\n                  {'Content-Type': 'application/json'}\n              }).then((response) => {\n              if (response.data && response.data.state === 'done') {\n                setPregels(prevPregels => {\n                  let updated = prevPregels;\n                  updated[pregel.pid].state = response.data.state;\n                  updated[pregel.pid].totalRuntime = response.data.totalRuntime.toFixed(5);\n                  return {...updated};\n                });\n\n                // auto update if changed to done\n                fetchExecutionResult(pregel);\n              }\n            });\n          }\n        }\n\n        // check output editor changes\n        let outputCursorPosition = outputEditorRef.current.editor.getCursorPosition();\n        let previewCursorPosition = previewEditorRef.current.editor.getCursorPosition();\n        let outputVal = \"\";\n        if (execution.summary) {\n          outputVal = JSON.stringify(execution.summary, null, 2)\n        }\n        let previewVal = \"\";\n        if (execution.preview) {\n          previewVal = JSON.stringify(execution.preview, null, 2)\n        }\n\n        // only update if changed\n        if (outputEditorRef.current.editor.getValue() !== outputVal) {\n          outputEditorRef.current.editor.setValue(outputVal, outputCursorPosition);\n        }\n        if (previewEditorRef.current.editor.getValue() !== previewVal) {\n          previewEditorRef.current.editor.setValue(previewVal, previewCursorPosition)\n        }\n      }\n\n      checkState(pregels);\n    },\n    1000\n  )\n  ;\n\n  let executeAlgorithm = async function () {\n    try {\n      let algorithm = editorRef.current.editor.getValue();\n\n      //remove comments\n      algorithm = algorithm.replace(/\\s*\\/\\/.*\\n/g, '\\n').replace(/\\s*\\/\\*[\\s\\S]*?\\*\\//g, '');\n      algorithm = JSON.parse(algorithm);\n\n      let resultField;\n      if ('resultField' in algorithm) {\n        resultField = algorithm.resultField;\n      } else {\n        toast.error(\"Attribute resultField is missing!\");\n        return;\n      }\n\n      if (!selectedGraph) {\n        toast.error(\"No SmartGraph selected!\");\n        return;\n      }\n\n      const response = await post(\n        process.env.REACT_APP_ARANGODB_COORDINATOR_URL + 'start',\n        {\n          name: \"AIR\",\n          graphName: selectedGraph,\n          algorithm: algorithm\n        },\n        {\n          headers:\n            {'Content-Type': 'application/json'}\n        });\n\n      setPregels(prevPregels => {\n        let updated = prevPregels;\n        updated[response.data.pid] = {\n          \"pid\": response.data.pid,\n          \"totalRuntime\": null,\n          \"resultField\": resultField,\n          \"selectedGraph\": selectedGraph,\n          \"state\": \"running\"\n        }\n        return {...updated};\n      });\n      notifyUser(\"Pregel started, PID: \" + response.data.pid);\n    } catch (e) {\n      console.log(e);\n      toast.error(\"Parse error!\");\n    }\n  }\n\n// global states\n  const [graphs] = useContext(SmartGraphListContext);\n  const [userDefinedAlgorithms] = useContext(UserDefinedAlgorithmsContext);\n  const [pregels, setPregels] = usePregel();\n  const [execution, setExecution] = useExecution();\n\n// local state\n  const [selectedGraph, setSelectedGraph] = useState(null);\n  const [selectedLocalAlgorithm, setLocalSelectedAlgorithm] = useState(null);\n\n  const setSelectedAlgorithm = (algo) => {\n    setLocalSelectedAlgorithm(algo);\n\n    let algorithm = \"\";\n    try {\n      algorithm = userDefinedAlgorithms[algo].algorithm;\n      editorRef.current.editor.setValue(JSON.stringify(algorithm, null, 2), -1);\n    } catch (e) {\n      toast(`Something went wrong: ${e}`);\n    }\n  }\n\n  const getSelectedAlgorithm = () => {\n    if (selectedLocalAlgorithm) {\n      let algorithm = \"\";\n      try {\n        algorithm = userDefinedAlgorithms[selectedLocalAlgorithm].algorithm;\n      } catch (e) {\n        toast(\"Error: \" + e);\n      }\n      return JSON.stringify(algorithm, null, 2)\n    }\n    // default\n    return JSON.stringify({}, null, 2)\n  }\n\n  // TODO: export function - copy & paste of RunningPregelList\n  const fetchExecutionResult = (execution) => {\n    toast(`Fetching status now of pid: ${execution.pid}`);\n\n    post(\n      process.env.REACT_APP_ARANGODB_COORDINATOR_URL + 'status',\n      {\n        pid: execution.pid\n      },\n      {\n        headers:\n          {'Content-Type': 'application/json'}\n      }).then((responseStatus) => {\n      if (responseStatus.data && responseStatus.data.state === 'done') {\n        post(\n          process.env.REACT_APP_ARANGODB_COORDINATOR_URL + 'resultDetails',\n          {\n            graphName: execution.selectedGraph,\n            resultField: execution.resultField\n          },\n          {\n            headers:\n              {'Content-Type': 'application/json'}\n          }).then((responseDetails) => {\n          if (responseDetails.data) {\n            let reports = [];\n\n            if (responseStatus.data.reports && responseStatus.data.reports.length >= 0) {\n              for (let [, report] of Object.entries(responseStatus.data.reports)) {\n                reports.push(report);\n              }\n              reports = responseStatus.data.reports;\n              delete responseStatus.data.reports;\n            }\n\n            // State the output editor will be filled automatically\n            let result = {\n              summary: responseStatus.data,\n              preview: responseDetails.data,\n              reports: reports\n            };\n            result.summary.pid = execution.pid;\n\n            setExecution(prevExecution => {\n              return {...result};\n            });\n          }\n        });\n      }\n    });\n  };\n\n  return (\n    <Box direction=\"column\" flex=\"grow\" fill=\"horizontal\">\n\n      <EditorActionsBar>\n        <Select\n          options={Object.keys(userDefinedAlgorithms)}\n          margin={{right: 'small'}}\n          placeholder={'Select Algorithm'}\n          //value={Object.keys(userDefinedAlgorithms)}\n          onChange={({option}) => {\n            setSelectedAlgorithm(option);\n          }}\n        />\n\n        <Select\n          options={graphs}\n          placeholder={'Select SmartGraph'}\n          value={selectedGraph}\n          onChange={({option}) => {\n            setSelectedGraph(option);\n          }}\n        />\n\n        <Button\n          primary\n          label=\"Execute\"\n          margin={{left: 'small'}}\n          onClick={executeAlgorithm}\n        />\n\n      </EditorActionsBar>\n\n      <Box direction='row' fill=\"vertical\">\n        <Box flex>\n          <AceEditor ref={editorRef}\n                     value={getSelectedAlgorithm()}\n                     mode=\"json\"\n                     width={'full'}\n                     height={'100%'}\n                     theme=\"monokai\"\n                     commands={[\n                       /*{\n                         name: \"executeAlgorithm\",\n                         bindKey: {win: \"Ctrl-Enter\", mac: \"Command-Enter\"},\n                         exec: executeAlgorithm\n                       }*/\n                     ]\n                     }\n                     name=\"aceInputEditor\"\n                     setOptions={{useWorker: false}}\n                     editorProps={{$blockScrolling: true}}\n          />\n        </Box>\n\n        <Box flex direction='column'>\n          <Box flex direction='row' width={'full'} height=\"small\">\n            <Box basis={'1/2'} background='dark-1'>\n              <Box background={'brand'}><Text margin={'xsmall'} weight={'bold'}>Summary</Text></Box>\n              <AceEditor ref={outputEditorRef}\n                         readOnly={true}\n                         value={\"\"}\n                         mode=\"json\"\n                         width={'full'}\n                         height={'100%'}\n                         theme=\"monokai\"\n                //onChange={{}}\n                         name=\"aceSummaryEditor\"\n                         setOptions={{useWorker: false}}\n                         editorProps={{$blockScrolling: true}}\n              />\n            </Box>\n            <Box basis={'1/2'} background='dark-1'>\n              <Box background={'brand'}><Text margin={'xsmall'} weight={'bold'}>Preview</Text></Box>\n              <AceEditor ref={previewEditorRef}\n                         value={\"\"}\n                         readOnly={true}\n                         mode=\"json\"\n                         width={'full'}\n                         height={'100%'}\n                         theme=\"monokai\"\n                //onChange={{}}\n                         name=\"aceSummaryEditor\"\n                         setOptions={{useWorker: false}}\n                         editorProps={{$blockScrolling: true}}\n              />\n            </Box>\n          </Box>\n          <Box background={'brand'}><Text margin={'xsmall'} weight={'bold'}>Reports</Text></Box>\n          <Box basis='2/3' overflow={\"scroll\"} background='dark-1'>\n            <DataTable resizeable={false} size={\"full\"} alignSelf={\"stretch\"} primaryKey={false}\n                       columns={[\n                         {\n                           property: 'msg',\n                           header: 'Message',\n                           size: 'medium',\n                           render: datum => (\n                             <Paragraph size={'small'}>\n                               {datum.msg}\n                             </Paragraph>\n                           )\n                         },\n                         {\n                           property: \"vertex\",\n                           header: \"Vertex\",\n                           size: 'small',\n                           render: datum => (\n                             <Box>\n                               <Text size={'small'}>{datum.annotations.vertex}</Text>\n                             </Box>\n                           )\n                         },\n                         {\n                           property: \"info\",\n                           header: \"Info\",\n                           size: 'small',\n                           render: datum => (\n                             <List className={\"smallList\"}\n                                   pad={'xxsmall'}\n                                   primaryKey=\"name\"\n                                   secondaryKey=\"content\"\n                                   data={[\n                                     {name: 'Level', content: datum.level},\n                                     {name: 'Shard', content: datum.annotations[\"pregel-id\"]?.shard},\n                                     {\n                                       name: 'Step / Superstep',\n                                       content: (datum.annotations[\"phase-step\"]) + \" / \" + (datum.annotations[\"global-superstep\"])\n                                     },\n                                     {name: 'Phase', content: datum.annotations[\"phase\"]}\n                                   ]}\n                             />\n                           )\n                         }\n                       ]}\n                       data={execution.reports || []}\n            />\n          </Box>\n\n        </Box>\n      </Box>\n    </Box>\n  )\n}\n\nexport default JSONEditor;","import React, {useState} from \"react\";\n\n// 3rd Party\nimport 'axios';\nimport {\n  Box,\n  Button,\n  Collapsible,\n  Grommet,\n  Layer,\n  ResponsiveContext,\n} from 'grommet';\nimport {FormClose, Notification} from 'grommet-icons';\nimport {ToastContainer} from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\n\n// Contexts\nimport {ExecutionProvider} from \"./ExecutionContext\";\nimport {PregelProvider} from './PregelContext';\nimport {SmartGraphListProvider} from \"./SmartGraphListContext\";\n\n// Components\nimport RunningPregelList from \"./RunningPregelList\";\nimport AppBarInfo from \"./AppBarInfo\";\nimport JSONEditor from \"./JSONEditor\";\nimport {UserDefinedAlgorithmsProvider} from \"./UserDefinedAlgorithmsContext\";\n\nconst theme = {\n  global: {\n    colors: {\n      brand: '#7D4CDB',\n    },\n    font: {\n      family: 'Roboto',\n      size: '18px',\n      height: '20px',\n    },\n  },\n};\n\nconst AppBar = (props) => (\n  <Box\n    tag='header'\n    direction='row'\n    align='center'\n    justify='between'\n    background='brand'\n    pad={{left: 'medium', right: 'small', vertical: 'small'}}\n    elevation='medium'\n    style={{zIndex: '1'}}\n    {...props}\n  />\n);\n\nfunction App() {\n  const [showSidebar, setShowSidebar] = useState(true);\n\n  return (\n    <PregelProvider>\n      <ExecutionProvider>\n        <SmartGraphListProvider>\n          <UserDefinedAlgorithmsProvider>\n            <Grommet theme={theme} full>\n              <ResponsiveContext.Consumer>\n                {size => (\n                  <Box fill>\n                    <AppBar>\n                      <AppBarInfo></AppBarInfo>\n                      <Button\n                        icon={<Notification/>}\n                        onClick={() => setShowSidebar(!showSidebar)}\n                      />\n                    </AppBar>\n                    <ToastContainer position=\"bottom-left\"/>\n                    <Box direction='row' flex overflow={{horizontal: 'hidden'}}>\n                      <Box flex>\n                        <JSONEditor>\n                        </JSONEditor>\n                      </Box>\n\n                      {(!showSidebar || size !== 'small') ? (\n                        <Collapsible direction=\"horizontal\" open={showSidebar}>\n                          <Box\n                            flex\n                            pad='small'\n                            width='medium'\n                            background='light-2'\n                            elevation='small'\n                          >\n                            <RunningPregelList/>\n                          </Box>\n                        </Collapsible>\n                      ) : (\n                        <Layer>\n                          <Box\n                            background='light-2'\n                            tag='header'\n                            justify='end'\n                            align='center'\n                            direction='row'\n                          >\n                            <Button\n                              icon={<FormClose/>}\n                              onClick={() => setShowSidebar(false)}\n                            />\n                          </Box>\n                          <Box\n                            fill\n                            background='light-2'\n                            align='center'\n                            justify='center'\n                          >\n                            sidebar\n                          </Box>\n                        </Layer>\n                      )}\n                    </Box>\n                  </Box>\n                )}\n              </ResponsiveContext.Consumer>\n            </Grommet>\n          </UserDefinedAlgorithmsProvider>\n        </SmartGraphListProvider>\n      </ExecutionProvider>\n    </PregelProvider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}