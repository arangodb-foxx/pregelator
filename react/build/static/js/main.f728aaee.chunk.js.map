{"version":3,"sources":["algos/exampleAlgorithm.js","ExecutionContext.js","PregelContext.js","SmartGraphListContext.js","RunningPregelList.js","AppBarInfo.js","JSONEditor.js","App.js","serviceWorker.js","index.js"],"names":["exampleAlgo","resultField","maxGSS","globalAccumulators","vertexAccumulators","rank","accumulatorType","valueType","storeSender","tmpRank","phases","name","initProgram","updateProgram","module","exports","ExecutionContext","createContext","ExecutionProvider","props","useState","execution","setExecution","Provider","value","children","useExecution","useContext","PregelContext","PregelProvider","pregels","setPregels","SmartGraphListContext","SmartGraphListProvider","graphs","setGraphs","useEffect","get","then","res","data","getRunning","filteredArr","Object","entries","pregel","state","push","getDone","RunningPregelList","Heading","level","keys","length","Box","Text","DataTable","columns","property","header","primary","render","datum","totalRuntime","onClickRow","toast","pid","post","headers","responseStatus","graphName","selectedGraph","responseDetails","result","summary","preview","prevExecution","AppBarInfo","margin","exampleAlgorithm","require","EditorActionsBar","direction","align","background","pad","left","right","vertical","elevation","style","zIndex","editorRef","React","createRef","outputEditorRef","JSONEditor","callback","delay","savedCallback","useRef","current","id","setInterval","clearInterval","useInterval","response","prevPregels","updated","toFixed","jsonEditor","set","checkState","executeAlgorithm","a","algorithm","error","msg","setSelectedGraph","flex","fill","options","placeholder","onChange","option","label","onClick","ref","navigationBar","mainMenuBar","mode","Editor","modes","code","ace","theme","htmlElementProps","border","global","colors","brand","font","family","size","height","AppBar","tag","justify","App","showSidebar","setShowSidebar","Grommet","full","ResponsiveContext","Consumer","Button","icon","Notification","position","overflow","horizontal","Layer","FormClose","Collapsible","open","width","Boolean","window","location","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console","message"],"mappings":"uJAAA,IAGMA,EAAc,CAClBC,YAJkB,cAMlBC,OAAQ,EACRC,mBAAoB,GACpBC,mBAAoB,CAClBC,KAAM,CACJC,gBAAiB,MACjBC,UAAW,UACXC,aAAa,GAEfC,QAAS,CACPH,gBAAiB,MACjBC,UAAW,UACXC,aAAa,IAGjBE,OAAQ,CACN,CACEC,KAAM,OACNC,YAAa,CACX,MACA,CAAC,aAAc,OAAQ,CAAC,IAAK,EAAG,CAAC,kBACjC,CAAC,aAAc,UAAW,GAC1B,CACE,wBACA,UACA,CAAC,IAAK,CAAC,YAAa,QAAS,CAAC,iCAEhC,GAEFC,cAAe,CACb,MACA,CACE,aACA,OACA,CACE,IACA,CAAC,IAAK,CAAC,IAAK,EAxCF,KAwCqB,CAAC,iBAChC,CAAC,IAzCS,IAyCW,CAAC,YAAa,cAGvC,CAAC,aAAc,UAAW,GAC1B,CACE,wBACA,UACA,CAAC,IAAK,CAAC,YAAa,QAAS,CAAC,iCAEhC,MAMRC,EAAOC,QAAQf,YAAcA,G,6KCvDhBgB,G,OAAmBC,2BAEnBC,EAAoB,SAAAC,GAAU,IAAD,EACNC,mBAAS,IADH,mBACjCC,EADiC,KACtBC,EADsB,KAGxC,OACE,kBAACN,EAAiBO,SAAlB,CAA2BC,MAAO,CAACH,EAAWC,IAC3CH,EAAMM,WAKAC,EAAe,kBAAMC,qBAAWX,ICZhCY,EAAgBX,0BAEhBY,EAAiB,SAAAV,GAAU,IAAD,EACPC,mBAAS,IADF,mBAC9BU,EAD8B,KACrBC,EADqB,KAGrC,OACE,kBAACH,EAAcL,SAAf,CAAwBC,MAAO,CAACM,EAASC,IACtCZ,EAAMM,WCNAO,EAAwBf,0BAGxBgB,EAAyB,SAAAd,GAAU,IAAD,EACjBC,mBAAS,IADQ,mBACtCc,EADsC,KAC9BC,EAD8B,KAa7C,OAJAC,qBAAU,WAJRC,cAAqD,UAClDC,MAAK,SAAAC,GAAG,OAAIJ,EAAUI,EAAIC,WAK5B,IAGD,kBAACR,EAAsBT,SAAvB,CAAgCC,MAAO,CAACU,EAAQC,IAC7ChB,EAAMM,W,mCCRPgB,EAAa,SAACX,GAElB,IADA,IAAIY,EAAc,GAClB,MAAuBC,OAAOC,QAAQd,GAAtC,eAAgD,CAAC,IAArCe,EAAoC,uBACzB,YAAjBA,EAAOC,OACTJ,EAAYK,KAAKF,GAGrB,OAAOH,GAGHM,EAAU,SAAClB,GAEf,IADA,IAAIY,EAAc,GAClB,MAAuBC,OAAOC,QAAQd,GAAtC,eAAgD,CAAC,IAArCe,EAAoC,uBACzB,SAAjBA,EAAOC,OACTJ,EAAYK,KAAKF,GAGrB,OAAOH,GAsHMO,EAnHW,WAAO,IAAD,EACLvB,IAAhBJ,EADqB,sBAEZK,qBAAWC,GAAtBE,EAFuB,oBA2C9B,OACE,6BAEE,kBAACoB,EAAA,EAAD,CAASC,MAAM,KAAf,YAA6BR,OAAOS,KAAKX,EAAWX,IAAUuB,OAA9D,KAEA,kBAACC,EAAA,EAAD,KAC+C,IAA5CX,OAAOS,KAAKX,EAAWX,IAAUuB,QAClC,kBAACE,EAAA,EAAD,yCAECZ,OAAOS,KAAKX,EAAWX,IAAUuB,OAAS,GAC3C,kBAACG,EAAA,EAAD,CACEC,QAAS,CACP,CACEC,SAAU,MACVC,OAAQ,kBAACJ,EAAA,EAAD,WACRK,SAAS,GAEX,CACEF,SAAU,UACVC,OAAQ,eACRE,OAAQ,SAAAC,GAAK,OACX,kBAACR,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,KAAOO,EAAM7D,iBAMrBuC,KAAMC,EAAWX,MAMrB,kBAACoB,EAAA,EAAD,CAASC,MAAM,KAAf,SAA0BR,OAAOS,KAAKJ,EAAQlB,IAAUuB,OAAxD,KACA,kBAACC,EAAA,EAAD,KAC4C,IAAzCX,OAAOS,KAAKJ,EAAQlB,IAAUuB,QAC/B,kBAACE,EAAA,EAAD,0CAECZ,OAAOS,KAAKJ,EAAQlB,IAAUuB,OAAS,GAExC,kBAACG,EAAA,EAAD,CACEC,QAAS,CACP,CACEC,SAAU,MACVC,OAAQ,kBAACJ,EAAA,EAAD,WACRK,SAAS,GAEX,CACEF,SAAU,UACVC,OAAQ,iBACRE,OAAQ,SAAAC,GAAK,OACX,kBAACR,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,KAAOO,EAAMC,kBAMrBC,WAAY,SAACF,GAlGQ,IAACzC,IAmGCyC,EAAMA,MAlGnCG,YAAM,+BAAD,OAAgC5C,EAAU6C,MAE/CC,eACmD,SACjD,CACED,IAAK7C,EAAU6C,KAEjB,CACEE,QACE,CAAC,eAAgB,sBAClB9B,MAAK,SAAC+B,GACLA,EAAe7B,MAAsC,SAA9B6B,EAAe7B,KAAKM,OAC7CqB,eACmD,gBACjD,CACEG,UAAWjD,EAAUkD,cACrBtE,YAAaoB,EAAUpB,aAEzB,CACEmE,QACE,CAAC,eAAgB,sBAClB9B,MAAK,SAACkC,GACT,GAAIA,EAAgBhC,KAAM,CACxB,IAAIiC,EAAS,CACXC,QAASL,EAAe7B,KACxBmC,QAASH,EAAgBhC,MAE3BiC,EAAOC,QAAQR,IAAM7C,EAAU6C,IAE/B5C,GAAa,SAAAsD,GACX,OAAO,eAAIH,cAsEfjC,KAAMQ,EAAQlB,Q,QC5HT+C,EAVI,WAAO,IAAD,EACLlD,qBAAWC,GAAtBE,EADgB,oBAEvB,OACE,6BACE,kBAAC,UAAD,CAASqB,MAAM,IAAI2B,OAAO,QAA1B,cACA,kBAAC,UAAD,CAAS3B,MAAM,IAAI2B,OAAO,QAA1B,wBAAuDnC,OAAOS,KAAKtB,GAASuB,U,mECS5E0B,G,cAAmBC,EAAQ,KAA+BhF,aAE1DiF,EAAmB,SAAC9D,GAAD,OACvB,kBAAC,MAAD,eACE+D,UAAU,MACVC,MAAM,SACNC,WAAW,UACXC,IAAK,CAACC,KAAM,QAASC,MAAO,QAASC,SAAU,SAC/CC,UAAU,SACVC,MAAO,CAACC,OAAQ,MACZxE,KAIJyE,EAAYC,IAAMC,YAClBC,EAAkBF,IAAMC,YA2B5B,IA6IeE,EA7II,YArBnB,SAAqBC,EAAUC,GAC7B,IAAMC,EAAgBC,mBAGtBhE,qBAAU,WACR+D,EAAcE,QAAUJ,IACvB,CAACA,IAGJ7D,qBAAU,WAKR,GAAc,OAAV8D,EAAgB,CAClB,IAAII,EAAKC,aALX,WACEJ,EAAcE,YAIaH,GAC3B,OAAO,kBAAMM,cAAcF,OAE5B,CAACJ,IAIJO,EAAY,YAES,SAAC3E,GAChB,IAD6B,IAAD,iBAChBe,EADgB,uBAEL,YAAjBA,EAAOC,OACTqB,eACmD,SACjD,CACED,IAAKrB,EAAOqB,KAEd,CACEE,QACE,CAAC,eAAgB,sBAClB9B,MAAK,SAACoE,GACLA,EAASlE,MAAgC,SAAxBkE,EAASlE,KAAKM,OACjCf,GAAW,SAAA4E,GACT,IAAIC,EAAUD,EAGd,OAFAC,EAAQ/D,EAAOqB,KAAKpB,MAAQ4D,EAASlE,KAAKM,MAC1C8D,EAAQ/D,EAAOqB,KAAKH,aAAe2C,EAASlE,KAAKuB,aAAa8C,QAAQ,GAC/D,eAAID,UAhBrB,MAAuBjE,OAAOC,QAAQd,GAAtC,eAAiD,IAwBjDiE,EAAgBM,QAAQS,WAAWC,IAAI1F,GAGzC2F,CAAWlF,KAEb,KAIF,IAAImF,EAAgB,uCAAG,gCAAAC,EAAA,oEAKf,gBAHAC,EAAYvB,EAAUS,QAAQS,WAAWzE,QAF1B,gBAMjBpC,EAAckH,EAAUlH,YANP,6BAQjBgE,IAAMmD,MAAM,qCARK,6BAYd7C,EAZc,wBAajBN,IAAMmD,MAAM,2BAbK,4CAiBIjD,eAC4B,QACjD,CACExD,KAAM,MACN2D,UAAWC,EACX4C,UAAWA,GAEb,CACE/C,QACE,CAAC,eAAgB,sBA1BJ,QAiBbsC,EAjBa,OA6BnB3E,GAAW,SAAA4E,GACT,IAAIC,EAAUD,EAQd,OAPAC,EAAQF,EAASlE,KAAK0B,KAAO,CAC3B,IAAOwC,EAASlE,KAAK0B,IACrB,aAAgB,KAChB,YAAejE,EACf,cAAiBsE,EACjB,MAAS,WAEJ,eAAIqC,MApGUS,EAsGZ,wBAA0BX,EAASlE,KAAK0B,IArGvDD,YAAMoD,GA6DiB,kDA0CnBpD,IAAMmD,MAAM,gBA1CO,kCA9DN,IAAUC,IA8DJ,qBAAH,qDArCG,EAoFN1F,qBAAWK,GAArBE,EApFgB,sBJ9CMP,qBAAWC,GI8CjB,mBAqFhBE,EArFgB,KAqFPC,EArFO,OAsFHL,IAAbL,EAtFgB,sBAyFmBD,mBAAS,MAzF5B,mBAyFhBmD,EAzFgB,KAyFD+C,EAzFC,KA2FvB,OACE,kBAAC,MAAD,CAAKpC,UAAU,SAASqC,KAAK,OAAOC,KAAK,cAEvC,kBAAC,EAAD,KACE,kBAAC,SAAD,CACEC,QAASvF,EACTwF,YAAa,oBACblG,MAAO+C,EACPoD,SAAU,YAAe,IAAbC,EAAY,EAAZA,OACVN,EAAiBM,MAIrB,kBAAC,SAAD,CACEhE,SAAO,EACPiE,MAAM,UACN/C,OAAQ,CAACQ,KAAM,SACfwC,QAASb,KAIb,kBAAC,MAAD,CAAK/B,UAAU,MAAMsC,KAAK,YACxB,kBAAC,MAAD,CAAKD,MAAI,GACP,kBAAC,IAAD,CAAQQ,IAAKnC,EACLpE,MAAOuD,EACPiD,eAAe,EACfC,aAAa,EACbC,KAAMC,IAAOC,MAAMC,KACnBC,IAAKA,IACLC,MAAM,oBACNC,iBAAkB,CAAC,UAAa,oBAG1C,kBAAC,MAAD,CAAKjB,MAAI,GACP,kBAAC,IAAD,CAAQQ,IAAKhC,EACLvE,MAAO,GACPwG,eAAe,EACfC,aAAa,EACbC,KAAMC,IAAOC,MAAMC,KACnBC,IAAKA,IACLC,MAAM,oBACN7C,MAAO,CAAC+C,OAAQ,GAChBD,iBAAkB,CAAC,UAAa,uBCvK5CD,EAAQ,CACZG,OAAQ,CACNC,OAAQ,CACNC,MAAO,WAETC,KAAM,CACJC,OAAQ,SACRC,KAAM,OACNC,OAAQ,UAKRC,EAAS,SAAC9H,GAAD,OACb,kBAACmC,EAAA,EAAD,eACE4F,IAAI,SACJhE,UAAU,MACVC,MAAM,SACNgE,QAAQ,UACR/D,WAAW,QACXC,IAAK,CAACC,KAAM,SAAUC,MAAO,QAASC,SAAU,SAChDC,UAAU,SACVC,MAAO,CAACC,OAAQ,MACZxE,KA4EOiI,MAxEf,WAAgB,IAAD,EACyBhI,oBAAS,GADlC,mBACNiI,EADM,KACOC,EADP,KAGb,OACE,kBAAC,EAAD,KACE,kBAAC,EAAD,KACE,kBAAC,EAAD,KACE,kBAACC,EAAA,EAAD,CAAShB,MAAOA,EAAOiB,MAAI,GACzB,kBAACC,EAAA,EAAkBC,SAAnB,MACG,SAAAX,GAAI,OACH,kBAACzF,EAAA,EAAD,CAAKkE,MAAI,GACP,kBAAC,EAAD,KACE,kBAAC,EAAD,MACA,kBAACmC,EAAA,EAAD,CACEC,KAAM,kBAACC,EAAA,EAAD,MACN/B,QAAS,kBAAMwB,GAAgBD,OAGnC,kBAAC,IAAD,CAAgBS,SAAS,gBACzB,kBAACxG,EAAA,EAAD,CAAK4B,UAAU,MAAMqC,MAAI,EAACwC,SAAU,CAACC,WAAY,WAC/C,kBAAC1G,EAAA,EAAD,CAAKiE,MAAI,GACP,kBAAC,EAAD,OAIC8B,GAAwB,UAATN,EAahB,kBAACkB,EAAA,EAAD,KACE,kBAAC3G,EAAA,EAAD,CACE8B,WAAW,UACX8D,IAAI,SACJC,QAAQ,MACRhE,MAAM,SACND,UAAU,OAEV,kBAACyE,EAAA,EAAD,CACEC,KAAM,kBAACM,EAAA,EAAD,MACNpC,QAAS,kBAAMwB,GAAe,OAGlC,kBAAChG,EAAA,EAAD,CACEkE,MAAI,EACJpC,WAAW,UACXD,MAAM,SACNgE,QAAQ,UAJV,YAzBF,kBAACgB,EAAA,EAAD,CAAajF,UAAU,aAAakF,KAAMf,GACxC,kBAAC/F,EAAA,EAAD,CACEiE,MAAI,EACJlC,IAAI,QACJgF,MAAM,SACNjF,WAAW,UACXK,UAAU,SAEV,kBAAC,EAAD,kBC3EN6E,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAAS9G,OACP,kBAAC,IAAM+G,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SD0HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB3I,MAAK,SAAA4I,GACJA,EAAaC,gBAEdC,OAAM,SAAAhE,GACLiE,QAAQjE,MAAMA,EAAMkE,c","file":"static/js/main.f728aaee.chunk.js","sourcesContent":["const resultField = \"resultField\";\nconst dampingFactor = 0.85;\n\nconst exampleAlgo = {\n  resultField: resultField,\n  // TODO: Karpott.\n  maxGSS: 5,\n  globalAccumulators: {},\n  vertexAccumulators: {\n    rank: {\n      accumulatorType: \"sum\",\n      valueType: \"doubles\",\n      storeSender: false,\n    },\n    tmpRank: {\n      accumulatorType: \"sum\",\n      valueType: \"doubles\",\n      storeSender: false,\n    },\n  },\n  phases: [\n    {\n      name: \"main\",\n      initProgram: [\n        \"seq\",\n        [\"accum-set!\", \"rank\", [\"/\", 1, [\"vertex-count\"]]],\n        [\"accum-set!\", \"tmpRank\", 0],\n        [\n          \"send-to-all-neighbors\",\n          \"tmpRank\",\n          [\"/\", [\"accum-ref\", \"rank\"], [\"this-number-outbound-edges\"]],\n        ],\n        true,\n      ],\n      updateProgram: [\n        \"seq\",\n        [\n          \"accum-set!\",\n          \"rank\",\n          [\n            \"+\",\n            [\"/\", [\"-\", 1, dampingFactor], [\"vertex-count\"]],\n            [\"*\", dampingFactor, [\"accum-ref\", \"tmpRank\"]],\n          ],\n        ],\n        [\"accum-set!\", \"tmpRank\", 0],\n        [\n          \"send-to-all-neighbors\",\n          \"tmpRank\",\n          [\"/\", [\"accum-ref\", \"rank\"], [\"this-number-outbound-edges\"]],\n        ],\n        true,\n      ],\n    },\n  ],\n};\n\nmodule.exports.exampleAlgo = exampleAlgo;\n","import React, {useState, createContext, useContext} from 'react';\n\nexport const ExecutionContext = createContext();\n\nexport const ExecutionProvider = props => {\n  const [execution, setExecution] = useState({});\n  \n  return (\n    <ExecutionContext.Provider value={[execution, setExecution]}>\n      {props.children}\n    </ExecutionContext.Provider>\n  );\n}\n\nexport const useExecution = () => useContext(ExecutionContext);","import React, {useState, createContext, useContext} from 'react';\n\nexport const PregelContext = createContext();\n\nexport const PregelProvider = props => {\n  const [pregels, setPregels] = useState({});\n\n  return (\n    <PregelContext.Provider value={[pregels, setPregels]}>\n      {props.children}\n    </PregelContext.Provider>\n  );\n}\n\nexport const usePregel = () => useContext(PregelContext);","import React, {useState, createContext, useEffect} from 'react';\nimport {get} from \"axios\";\n\nexport const SmartGraphListContext = createContext();\n\n\nexport const SmartGraphListProvider = props => {\n  const [graphs, setGraphs] = useState([\n  ]);\n\n  const fetchData = function () {\n    get(process.env.REACT_APP_ARANGODB_COORDINATOR_URL + 'graphs')\n      .then(res => setGraphs(res.data))\n  }\n\n  useEffect(() => {\n    fetchData();\n  }, []);\n\n  return (\n    <SmartGraphListContext.Provider value={[graphs, setGraphs]}>\n      {props.children}\n    </SmartGraphListContext.Provider>\n  );\n}","import React, {useContext} from 'react';\nimport {\n  Heading,\n  Box,\n  DataTable,\n  Text\n} from 'grommet';\n\nimport {PregelContext} from './PregelContext';\nimport {useExecution} from \"./ExecutionContext\";\nimport {post} from \"axios\";\nimport {toast} from \"react-toastify\";\n\nconst getRunning = (pregels) => {\n  let filteredArr = [];\n  for (let [, pregel] of Object.entries(pregels)) {\n    if (pregel.state === 'running') {\n      filteredArr.push(pregel);\n    }\n  }\n  return filteredArr;\n};\n\nconst getDone = (pregels) => {\n  let filteredArr = [];\n  for (let [, pregel] of Object.entries(pregels)) {\n    if (pregel.state === 'done') {\n      filteredArr.push(pregel);\n    }\n  }\n  return filteredArr;\n};\n\nconst RunningPregelList = () => {\n  const [, setExecution] = useExecution();\n  const [pregels] = useContext(PregelContext);\n\n  const fetchExecutionResult = (execution) => {\n    toast(`Fetching status now of pid: ${execution.pid}`);\n\n    post(\n      process.env.REACT_APP_ARANGODB_COORDINATOR_URL + 'status',\n      {\n        pid: execution.pid\n      },\n      {\n        headers:\n          {'Content-Type': 'application/json'}\n      }).then((responseStatus) => {\n      if (responseStatus.data && responseStatus.data.state === 'done') {\n        post(\n          process.env.REACT_APP_ARANGODB_COORDINATOR_URL + 'resultDetails',\n          {\n            graphName: execution.selectedGraph,\n            resultField: execution.resultField\n          },\n          {\n            headers:\n              {'Content-Type': 'application/json'}\n          }).then((responseDetails) => {\n          if (responseDetails.data) {\n            let result = {\n              summary: responseStatus.data,\n              preview: responseDetails.data\n            };\n            result.summary.pid = execution.pid;\n\n            setExecution(prevExecution => {\n              return {...result};\n            });\n          }\n        });\n      }\n    });\n  };\n\n  return (\n    <div>\n\n      <Heading level=\"3\">Running ({Object.keys(getRunning(pregels)).length})</Heading>\n\n      <Box>\n        {Object.keys(getRunning(pregels)).length === 0 &&\n        <Text>No pregel algorithm started yet.</Text>\n        }\n        {Object.keys(getRunning(pregels)).length > 0 &&\n        <DataTable\n          columns={[\n            {\n              property: 'pid',\n              header: <Text>ID</Text>,\n              primary: true,\n            },\n            {\n              property: 'percent',\n              header: 'Result field',\n              render: datum => (\n                <Box>\n                  <Text>{datum.resultField}</Text>\n                </Box>\n\n              )\n            },\n          ]}\n          data={getRunning(pregels)}\n        />\n        }\n\n      </Box>\n\n      <Heading level=\"3\">Done ({Object.keys(getDone(pregels)).length})</Heading>\n      <Box>\n        {Object.keys(getDone(pregels)).length === 0 &&\n        <Text>No pregel algorithm finished yet.</Text>\n        }\n        {Object.keys(getDone(pregels)).length > 0 &&\n\n        <DataTable\n          columns={[\n            {\n              property: 'pid',\n              header: <Text>ID</Text>,\n              primary: true,\n            },\n            {\n              property: 'percent',\n              header: 'Execution time',\n              render: datum => (\n                <Box>\n                  <Text>{datum.totalRuntime}</Text>\n                </Box>\n\n              )\n            },\n          ]}\n          onClickRow={(datum) => {\n            fetchExecutionResult(datum.datum);\n          }}\n          data={getDone(pregels)}\n        />\n\n        }\n      </Box>\n\n    </div>\n  );\n}\n\nexport default RunningPregelList;","import React, {useContext} from 'react';\nimport {PregelContext} from \"./PregelContext\";\nimport {Heading} from \"grommet/index\";\n\nconst AppBarInfo = () => {\n  const [pregels] = useContext(PregelContext);\n  return (\n    <div>\n      <Heading level='4' margin='none'>Pregelator</Heading>\n      <Heading level='6' margin='none'>Executed algorithms: {Object.keys(pregels).length}</Heading>\n    </div>\n  )\n}\n\nexport default AppBarInfo;","import React, {useContext, useEffect, useState, useRef} from 'react';\n\nimport {JsonEditor as Editor} from \"jsoneditor-react\";\nimport 'jsoneditor-react/es/editor.min.css';\nimport './css/customEditor.css';\n\nimport ace from \"brace\";\nimport 'brace/mode/json';\nimport 'brace/theme/monokai';\n\nimport {Box, Button, Select} from \"grommet/index\";\nimport {post} from \"axios\";\nimport {toast} from \"react-toastify\";\n\nimport {usePregel} from \"./PregelContext\";\nimport {SmartGraphListContext} from \"./SmartGraphListContext\";\nimport {useExecution} from \"./ExecutionContext\";\n\nconst exampleAlgorithm = require('./algos/exampleAlgorithm.js').exampleAlgo;\n\nconst EditorActionsBar = (props) => (\n  <Box\n    direction='row'\n    align='center'\n    background='#272822'\n    pad={{left: 'small', right: 'small', vertical: 'small'}}\n    elevation='medium'\n    style={{zIndex: '1'}}\n    {...props}\n  />\n);\n\nlet editorRef = React.createRef();\nlet outputEditorRef = React.createRef();\n\nconst notifyUser = function (msg) {\n  toast(msg);\n}\n\nfunction useInterval(callback, delay) {\n  const savedCallback = useRef();\n\n  // Remember the latest callback.\n  useEffect(() => {\n    savedCallback.current = callback;\n  }, [callback]);\n\n  // Set up the interval.\n  useEffect(() => {\n    function tick() {\n      savedCallback.current();\n    }\n\n    if (delay !== null) {\n      let id = setInterval(tick, delay);\n      return () => clearInterval(id);\n    }\n  }, [delay]);\n}\n\nconst JSONEditor = () => {\n  useInterval(() => {\n      // Update logic\n      let checkState = (pregels) => {\n        for (let [, pregel] of Object.entries(pregels)) {\n          if (pregel.state === 'running') {\n            post(\n              process.env.REACT_APP_ARANGODB_COORDINATOR_URL + 'status',\n              {\n                pid: pregel.pid\n              },\n              {\n                headers:\n                  {'Content-Type': 'application/json'}\n              }).then((response) => {\n              if (response.data && response.data.state === 'done') {\n                setPregels(prevPregels => {\n                  let updated = prevPregels;\n                  updated[pregel.pid].state = response.data.state;\n                  updated[pregel.pid].totalRuntime = response.data.totalRuntime.toFixed(5);\n                  return {...updated};\n                });\n              }\n            });\n          }\n        }\n\n        // check output editor changes\n        outputEditorRef.current.jsonEditor.set(execution);\n      }\n\n      checkState(pregels);\n    },\n    1000\n  )\n  ;\n\n  let executeAlgorithm = async function () {\n    try {\n      let algorithm = editorRef.current.jsonEditor.get();\n\n      let resultField;\n      if ('resultField' in algorithm) {\n        resultField = algorithm.resultField;\n      } else {\n        toast.error(\"Attribute resultField is missing!\");\n        return;\n      }\n\n      if (!selectedGraph) {\n        toast.error(\"No SmartGraph selected!\");\n        return;\n      }\n\n      const response = await post(\n        process.env.REACT_APP_ARANGODB_COORDINATOR_URL + 'start',\n        {\n          name: \"AIR\",\n          graphName: selectedGraph,\n          algorithm: algorithm\n        },\n        {\n          headers:\n            {'Content-Type': 'application/json'}\n        });\n\n      setPregels(prevPregels => {\n        let updated = prevPregels;\n        updated[response.data.pid] = {\n          \"pid\": response.data.pid,\n          \"totalRuntime\": null,\n          \"resultField\": resultField,\n          \"selectedGraph\": selectedGraph,\n          \"state\": \"running\"\n        }\n        return {...updated};\n      });\n      notifyUser(\"Pregel started, PID: \" + response.data.pid);\n    } catch (e) {\n      toast.error(\"Parse error!\");\n    }\n  }\n\n// global states\n  const [graphs] = useContext(SmartGraphListContext);\n  const [pregels, setPregels] = usePregel();\n  const [execution] = useExecution();\n\n// local state\n  const [selectedGraph, setSelectedGraph] = useState(null);\n\n  return (\n    <Box direction=\"column\" flex=\"grow\" fill=\"horizontal\">\n\n      <EditorActionsBar>\n        <Select\n          options={graphs}\n          placeholder={'Select SmartGraph'}\n          value={selectedGraph}\n          onChange={({option}) => {\n            setSelectedGraph(option);\n          }}\n        />\n\n        <Button\n          primary\n          label=\"Execute\"\n          margin={{left: 'small'}}\n          onClick={executeAlgorithm}\n        />\n      </EditorActionsBar>\n\n      <Box direction='row' fill=\"vertical\">\n        <Box flex>\n          <Editor ref={editorRef}\n                  value={exampleAlgorithm}\n                  navigationBar={false}\n                  mainMenuBar={false}\n                  mode={Editor.modes.code}\n                  ace={ace}\n                  theme=\"ace/theme/monokai\"\n                  htmlElementProps={{\"className\": \"editorWrapper\"}}\n          />\n        </Box>\n        <Box flex>\n          <Editor ref={outputEditorRef}\n                  value={{}}\n                  navigationBar={false}\n                  mainMenuBar={false}\n                  mode={Editor.modes.code}\n                  ace={ace}\n                  theme=\"ace/theme/monokai\"\n                  style={{border: 0}}\n                  htmlElementProps={{\"className\": \"editorWrapper\"}}\n          />\n        </Box>\n      </Box>\n    </Box>\n  )\n}\n\nexport default JSONEditor;","import React, {useState} from \"react\";\n\n// 3rd Party\nimport 'axios';\nimport {\n  Box,\n  Button,\n  Collapsible,\n  Grommet,\n  Layer,\n  ResponsiveContext,\n} from 'grommet';\nimport {FormClose, Notification} from 'grommet-icons';\nimport {ToastContainer} from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\n\n// Contexts\nimport {ExecutionProvider} from \"./ExecutionContext\";\nimport {PregelProvider} from './PregelContext';\nimport {SmartGraphListProvider} from \"./SmartGraphListContext\";\n\n// Components\nimport RunningPregelList from \"./RunningPregelList\";\nimport AppBarInfo from \"./AppBarInfo\";\nimport JSONEditor from \"./JSONEditor\";\n\nconst theme = {\n  global: {\n    colors: {\n      brand: '#7D4CDB',\n    },\n    font: {\n      family: 'Roboto',\n      size: '18px',\n      height: '20px',\n    },\n  },\n};\n\nconst AppBar = (props) => (\n  <Box\n    tag='header'\n    direction='row'\n    align='center'\n    justify='between'\n    background='brand'\n    pad={{left: 'medium', right: 'small', vertical: 'small'}}\n    elevation='medium'\n    style={{zIndex: '1'}}\n    {...props}\n  />\n);\n\nfunction App() {\n  const [showSidebar, setShowSidebar] = useState(true);\n\n  return (\n    <PregelProvider>\n      <ExecutionProvider>\n        <SmartGraphListProvider>\n          <Grommet theme={theme} full>\n            <ResponsiveContext.Consumer>\n              {size => (\n                <Box fill>\n                  <AppBar>\n                    <AppBarInfo></AppBarInfo>\n                    <Button\n                      icon={<Notification/>}\n                      onClick={() => setShowSidebar(!showSidebar)}\n                    />\n                  </AppBar>\n                  <ToastContainer position=\"bottom-left\"/>\n                  <Box direction='row' flex overflow={{horizontal: 'hidden'}}>\n                    <Box flex>\n                      <JSONEditor>\n                      </JSONEditor>\n                    </Box>\n\n                    {(!showSidebar || size !== 'small') ? (\n                      <Collapsible direction=\"horizontal\" open={showSidebar}>\n                        <Box\n                          flex\n                          pad='small'\n                          width='medium'\n                          background='light-2'\n                          elevation='small'\n                        >\n                          <RunningPregelList/>\n                        </Box>\n                      </Collapsible>\n                    ) : (\n                      <Layer>\n                        <Box\n                          background='light-2'\n                          tag='header'\n                          justify='end'\n                          align='center'\n                          direction='row'\n                        >\n                          <Button\n                            icon={<FormClose/>}\n                            onClick={() => setShowSidebar(false)}\n                          />\n                        </Box>\n                        <Box\n                          fill\n                          background='light-2'\n                          align='center'\n                          justify='center'\n                        >\n                          sidebar\n                        </Box>\n                      </Layer>\n                    )}\n                  </Box>\n                </Box>\n              )}\n            </ResponsiveContext.Consumer>\n          </Grommet>\n        </SmartGraphListProvider>\n      </ExecutionProvider>\n    </PregelProvider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}